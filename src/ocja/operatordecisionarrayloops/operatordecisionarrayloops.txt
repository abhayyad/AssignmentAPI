1. Swich statement
switch expression can accept following: 
char or Character, 
byte or Byte, 
short or Short, 
int or Integer, 
An enum only from Java 6, 
A String expression only from Java 7. 

2. Print statement 

As expression contains + operator only, which is left to right associative. Let us group the expression.
"Hello" + 1 + 2 + 3 + 4
= ("Hello" + 1) + 2 + 3 + 4
= (("Hello" + 1) + 2) + 3 + 4
= ((("Hello" + 1) + 2) + 3) + 4
[Let us solve it now, + operator with String behaves as concatenation operator.]
= (("Hello1" + 2) + 3) + 4
= ("Hello12" + 3) + 4
= "Hello123" + 4
= "Hello1234"

As expression contains + operator only, which is left to right associative. Let us group the expression.

1 + 2 + 3 + 4 + "Hello"
= (1 + 2) + 3 + 4 + "Hello"
= ((1 + 2) + 3) + 4 + "Hello"
= (((1 + 2) + 3) + 4) + "Hello"
[Let us solve it now,]
= ((3 + 3) + 4) + "Hello"
= (6 + 4) + "Hello"
= 10 + "Hello"
[+ operator with String behaves as concatenation operator.]
= 10Hello

*****Another example ******


System.out.println(!flag1 == flag2 != flag3 == !flag4); // in print Calculate from left to right
System.out.println(flag1 = flag2 != flag3 == !flag4); //in print Calculate from left to right


3. If ... else without curly braces 
// note JVM at run only considers first statement after if or else 
// if there are 2 statements after if followed by else : compilation error

4. Switch statement 
we have to be cautious of break statement in switch .

5.Negation in Print statement 
Below is Ok.
System.out.println(-a++);

6. Be cautious on the || and && operation with increament and decrement . i.e. short-circuit operator

7. Bitwise Operator (|) : works same as OR operater
 System.out.println((flag = true) | (flag = false) || (flag = true));

8. Below prinnt is valid.

Prints value at %d i.e. a,b,c,d,res that is available after comma.
System.out.printf("a = %d, b = %d, c = %d, d = %d, res = %b", a, b, c, d, res);

Note for boolean %b has been used , for integer %d

9. Array Declation and initialization

int array [] = new int[50]; // array declaration
int [] array1 = new int [100]; // array declaration
int array2[] = {10,20,30,40}; // array declaration + initialization
int array3 [] = new int[0];	    
char arr [] [] = new char[1][];
char [] arr1 [] = new char [1][];

int [] arr10 = new int[]{0, 1, 0, 0}; *********** this is ok without size mentioned

// int [] arr10 = new int[4]{0, 1, 0, 0};  compile time error ,Array's size can't be specified, if you use {} to assign values to array elements.
	    
// char [] arr2 [] = new char [][0]; // not allowed - compile time error 


10. Array assignment withing data types
e.g1
int [] arr1 = {1, 2, 3};
char [] arr2 = {'A', 'B'};
Statement arr1 = arr2; gives compilation error as char [] is not compatible with int [] even though char is compatible with int.
e.g.2
double [] arr = new int[2];
gives compilation error as double [] is not compatible with int []


11.assignment operator is right to left associative.

arr2 = arr3 = arr1;
=> arr2 = (arr3 = arr1); this is ok as long as these are compatible assignment 



12. Compile time contanst : un reachable code 

 final boolean flag = false;
        while(flag) 
	{    // compilation error - unreachable code 
            System.out.println("Good Morning!"); 
        }

If replcaed with below , then no compilation error
final boolean flag; 
flag = false;

13.Unreachable Code - compile error

        do {
            System.out.println(100);
        } while (true);
        
        System.out.println("Bye"); // Unreachable Code - compile time error

14.Print 2 -dimentional array

		System.out.println("*********for loop ***************");

		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				System.out.print(arr[i][j]);
			}
			System.out.println();
		}
		
		System.out.println("**********for each loop**************");
		
		for (char [] ch : arr) {
			
			for (char value : ch) {				
				System.out.print(value);			
			}		
			System.out.println();			
		}
15. Single dimentional array ''


	System.out.println("**********for each loop**************");
	for ( int value : array) {
			
			System.out.println(value + " ");
			
		}


16. For Loop 
Basic/Regular for loop has following form:

for ( [ForInit] ; [Expression] ; [ForUpdate] ) {...}

[ForInit] can be local variable initialization or the following expressions:

Assignment
PreIncrementExpression
PreDecrementExpression
PostIncrementExpression
PostDecrementExpression
MethodInvocation
ClassInstanceCreationExpression

[ForUpdate] can be following expressions:
Assignment
PreIncrementExpression
PreDecrementExpression
PostIncrementExpression
PostDecrementExpression
MethodInvocation
ClassInstanceCreationExpression

The [Expression] must have type boolean or Boolean, or a compile-time error occurs. If [Expression] is left blank, it evaluates to true.

All the expressions can be left blank; for(;;) is a valid for loop and it is an infinite loop as [Expression] is blank and evaluates to true.	

17. 

